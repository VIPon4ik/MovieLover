{"version":3,"file":"static/js/961.61459e73.chunk.js","mappings":"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","sources":["api/moviesApi.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nimport { OPTIONS } from 'constants';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('trending/all/day?language=en-US', OPTIONS);\n  return response.data;\n};\n\nexport const getMovieDetails = async (movieId, part = '') => {\n  const response = await axios.get(`movie/${movieId}${part}?language=en-US`, OPTIONS);\n  return response.data;\n}\n\nexport const getMovies = async (query, page = 1) => {\n  const response = await axios.get(`/search/movie?query=${query}&page=${page}`, OPTIONS)\n  return response.data;\n}\n","import React, { useEffect, useRef, useState, Suspense } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { FaStar } from 'react-icons/fa6';\nimport { FaLongArrowAltLeft } from 'react-icons/fa';\nimport { getMovieDetails } from 'api/moviesApi';\nimport {\n  ImageContainer,\n  NoPoster,\n  RatingText,\n  MovieLink,\n  MovieLinkList,\n} from './MovieDetails.styled';\nimport { IMAGE_BASE_PATH, COLORS } from 'constants';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState({});\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const getBackLink = () => {\n    if (location.state?.from.pathname === '/') {\n      return '/';\n    }\n\n    return location.state?.from.search\n      ? `/movies${location.state.from.search}`\n      : '/movies';\n  };\n\n  const backLink = useRef(getBackLink());\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      setIsLoading(true);\n      try {\n        const movieDetails = await getMovieDetails(movieId);\n        setMovie(movieDetails);\n      } catch (error) {\n        toast.error('Problem with API: ', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieDetails();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <MovieLink to={`${backLink.current}`}>\n        <FaLongArrowAltLeft />\n        Go back\n      </MovieLink>\n      <ImageContainer>\n        {movie.poster_path ? (\n          <img\n            src={`${IMAGE_BASE_PATH}${movie.poster_path}`}\n            alt={`${movie.title} poster`}\n            width={300}\n            height={450}\n          />\n        ) : (\n          <NoPoster>No poster</NoPoster>\n        )}\n        <div>\n          <h1>{movie.title}</h1>\n          <RatingText>\n            <FaStar fill={COLORS.dark_red} /> {movie.vote_average}\n          </RatingText>\n          <h2>Overview</h2>\n          <p>{movie.overview}</p>\n          <h3>Genres</h3>\n          <ul>\n            {movie.genres &&\n              movie.genres.map(({ name }) => <li key={name}>{name}</li>)}\n          </ul>\n        </div>\n      </ImageContainer>\n      <hr />\n      <MovieLinkList>\n        <li>\n          <MovieLink to=\"cast\">Cast</MovieLink>\n        </li>\n        <li>\n          <MovieLink to=\"reviews\">Reviews</MovieLink>\n        </li>\n      </MovieLinkList>\n      <hr />\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["axios","getTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","OPTIONS","sent","abrupt","data","stop","apply","arguments","getMovieDetails","_ref2","_callee2","movieId","part","_args2","_context2","length","undefined","concat","_x","getMovies","_ref3","_callee3","query","page","_args3","_context3","_x2","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","movie","setMovie","useParams","location","useLocation","backLink","useRef","_location$state","_location$state2","state","from","pathname","search","getBackLink","useEffect","fetchMovieDetails","movieDetails","t0","toast","finish","_jsxs","_Fragment","children","_jsx","Loader","MovieLink","to","current","FaLongArrowAltLeft","ImageContainer","poster_path","src","IMAGE_BASE_PATH","alt","title","width","height","NoPoster","RatingText","FaStar","fill","COLORS","vote_average","overview","genres","map","name","MovieLinkList","Suspense","fallback","Outlet"],"sourceRoot":""}